package sequence.makingSlices;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static sequence.makingSlices.RangeConfigurator.WRONG_BOUNDARY;
import static sequence.makingSlices.RangeConfigurator.WRONG_DIRECTION;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

public class TestSlicer {
    private final List<Integer> givenList = Arrays.asList(0, 1, 2, 3, 4, 5);
    private final int length = givenList.size();
    private final Slicer slices = new Slicer();

    @Test
    public void whenListIsNullThenThrowsIllegalArgumentException() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            slices.slice((List<Object>) null, 1, 2, 1);
        });
        assertEquals(Slicer.LIST_IS_NULL, exception.getMessage());
    }

    @Test
    public void whenListIsEmptyThenReturnEmptyList() {
        List<Integer> inputList = new ArrayList<>();
        List<Integer> expected = new ArrayList<>();
        List<Integer> actual = slices.slice(
                inputList, 1, 1, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsInvalidThenThrowsIllegalArgumentException() {
        Exception bigStartException = assertThrows(
                IllegalArgumentException.class, () -> {
                    slices.slice(
                            givenList, length, 4, -1);
                });
        assertEquals(WRONG_BOUNDARY, bigStartException.getMessage());

        Exception lowStartException = assertThrows(
                IllegalArgumentException.class, () -> {
                    slices.slice(givenList, -length, 5, 1);
                });
        assertEquals(WRONG_BOUNDARY, lowStartException.getMessage());

    }

    @Test
    public void whenEndIsInvalidThenThrowsIllegalArgumentException() {
        Exception bigEndException = assertThrows(
                IllegalArgumentException.class, () -> {
                    slices.slice(
                            givenList, 1, length, 1);
                });
        assertEquals(WRONG_BOUNDARY, bigEndException.getMessage());

        Exception lowEndException = assertThrows(
                IllegalArgumentException.class, () -> {
                    slices.slice(givenList, 1, -length, 1);
                });
        assertEquals(WRONG_BOUNDARY, lowEndException.getMessage());
    }

    @Test
    public void whenStartIsValidNegativeThenIsReplacedWithPositive() {
        List<Integer> expectedWithNegativeStart = slices.slice(
                givenList, -length + 1, null, 1);
        List<Integer> expectedWithPositiveStart = slices.slice(
                givenList, 1, null, 1);
        assertEquals(expectedWithNegativeStart, expectedWithPositiveStart);
    }

    @Test
    public void whenEndIsValidNegativeThenIsReplacedWithPositive() {
        List<Integer> expectedWithNegativeEnd = slices.slice(
                givenList, null, -length + 1, -1);
        List<Integer> expectedWithPositiveEnd = slices.slice(
                givenList, null, 1, -1);
        assertEquals(expectedWithNegativeEnd, expectedWithPositiveEnd);
    }

    @Test
    public void whenStepIsToBigThenReturnStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = slices.slice(
                givenList, 1, null, length);
        assertEquals(expected, actual);
    }

    // AutoGenerated tests

    @Test
    public void whenStartIsNullEndIsNullStepIsNullThenReturnEntireList() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, null, null, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsNullStepIsMinusTwoThenReturnOddReversedList() {
        List<Integer> expected = Arrays.asList(5, 3, 1);
        List<Integer> actual = new Slicer().slice(
                givenList, null, null, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsNullStepIsMinusOneThenReturnReversedList() {
        List<Integer> expected = Arrays.asList(5, 4, 3, 2, 1, 0);
        List<Integer> actual = new Slicer().slice(
                givenList, null, null, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsNullStepIsZeroThenReturnEntireList() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, null, null, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsNullStepIsOneThenReturnEntireList() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, null, null, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsNullStepIsTwoThenReturnEvenList() {
        List<Integer> expected = Arrays.asList(0, 2, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, null, null, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsZeroStepIsNullThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 0, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsZeroStepIsMinusTwoThenOddReversedList() {
        List<Integer> expected = Arrays.asList(5, 3, 1);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 0, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsZeroStepIsMinusOneThenReturnReversedList() {
        List<Integer> expected = Arrays.asList(5, 4, 3, 2, 1);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 0, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsZeroStepIsZeroThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 0, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsZeroStepIsOneThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 0, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsZeroStepIsTwoThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 0, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsOneStepIsNullThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 1, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsOneStepIsMinusTwoThenReturnOddList() {
        List<Integer> expected = Arrays.asList(5, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 1, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsOneStepIsMinusOneThenReturnReversedList() {
        List<Integer> expected = Arrays.asList(5, 4, 3, 2);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 1, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsOneStepIsZeroThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 1, 0);
        assertEquals(expected, actual);
    }

    // first

    @Test
    public void whenStartIsNullEndIsOneStepIsOneThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 1, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsOneStepIsTwoThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 1, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsFourStepIsNullThenReturnListFromFourElements() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 4, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsFourStepIsMinusTwoThenReturnListWithLast() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 4, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsFourStepIsMinusOneThenReturnListWithLast() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 4, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsFourStepIsZeroThenReturnListWithFourElements() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 4, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsFourStepIsOneThenReturnListWithFourElements() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 4, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsFourStepIsTwoThenReturnListWithTwoElements() {
        List<Integer> expected = Arrays.asList(0, 2);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 4, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsFifeStepIsNullThenReturnListWithoutLast() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 5, null);
        assertEquals(expected, actual);
    }

    // second
    @Test
    public void whenStartIsNullEndIsFifeStepIsMinusTwoThenReturnListWithLast() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 5, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsFifeStepIsMinusOneThenReturnListWithLast() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 5, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsFifeStepIsZeroThenReturnListWithoutLast() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 5, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsFifeStepIsOneThenReturnListWithOutLast() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 5, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsNullEndIsFifeStepIsTwoThenReturnListWithThreeElements() {
        List<Integer> expected = Arrays.asList(0, 2, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, null, 5, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsNullStepIsNullThenReturnEntireList() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, null, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsNullStepIsMinusTwoThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, null, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsNullStepIsMinusOneThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, null, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsNullStepIsZeroThenReturnEntireList() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, null, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsNullStepIsOneThenReturnEntireList() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, null, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsNullStepIsTwoThenReturnOddList() {
        List<Integer> expected = Arrays.asList(0, 2, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, null, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsZeroStepIsNullThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 0, null);
        assertEquals(expected, actual);
    }

    // third

    @Test
    public void whenStartIsZeroEndIsZeroStepIsMinusTwoThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 0, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsZeroStepIsMinusOneThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 0, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsZeroStepIsZeroThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 0, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsZeroStepIsOneThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 0, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsZeroStepIsTwoThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 0, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsOneStepIsNullThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 1, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsOneStepIsMinusTwoThenThrowsIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 0, 1, -2));

        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsOneStepIsMinusOneThenThrowsIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 0, 1, -1));

        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsOneStepIsZeroThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 1, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsOneStepIsOneThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 1, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsOneStepIsTwoThenReturnListWithFirst() {
        List<Integer> expected = Arrays.asList(0);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 1, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsFourStepIsNullThenReturnListWithFourElements() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 4, null);
        assertEquals(expected, actual);
    }

    // fourth

    @Test
    public void whenStartIsZeroEndIsFourStepIsMinusTwoThenReturnList() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 0, 4, -2));

        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsFourStepIsMinusOneThenReturnList() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 0, 4, -1));

        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsFourStepIsZeroThenReturnListWithFourElements() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 4, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsFourStepIsOneThenReturnListWithFourElements() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 4, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsFourStepIsTwoThenReturnListWithTwoEvenElements() {
        List<Integer> expected = Arrays.asList(0, 2);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 4, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsFifeStepIsNullThenReturnListWithFifeElements() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 5, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsFifeStepIsMinusTwoThenThrowsIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 0, 5, -2));

        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsFifeStepIsMinusOneThenReturnList() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 0, 5, -1));

        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsFifeStepIsZeroThenReturnListWithFifeElements() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 5, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsFifeStepIsOneThenReturnListWithFifeElements() {
        List<Integer> expected = Arrays.asList(0, 1, 2, 3, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 5, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsZeroEndIsFifeStepIsTwoThenReturnListWithOddElements() {
        List<Integer> expected = Arrays.asList(0, 2, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, 0, 5, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsNullStepIsNullThenReturnListWithoutFirstElements() {
        List<Integer> expected = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, null, null);
        assertEquals(expected, actual);
    }

    // fifth

    @Test
    public void whenStartIsOneEndIsNullStepIsMinusTwoThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, null, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsNullStepIsMinusOneThenReturnListFromStartReversed() {
        List<Integer> expected = Arrays.asList(1, 0);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, null, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsNullStepIsZeroThenReturnListWithoutFirst() {
        List<Integer> expected = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, null, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsNullStepIsOneThenReturnListWithoutFirst() {
        List<Integer> expected = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, null, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsNullStepIsTwoThenReturnOddList() {
        List<Integer> expected = Arrays.asList(1, 3, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, null, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsZeroStepIsNullThenReturnListWithStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 0, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsZeroStepIsMinusTwoThenReturnListWithStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 0, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsZeroStepIsMinusOneThenReturnListWithStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 0, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsZeroStepIsZeroThenReturnListWithStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 0, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsZeroStepIsOneThenTrowsIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 1, 0, 1));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsZeroStepIsTwoThenReturnListIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 1, 0, 2));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsOneStepIsNullThenReturnListWithStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 1, null);
        assertEquals(expected, actual);
    }

    // sexth

    @Test
    public void whenStartIsOneEndIsOneStepIsMinusTwoThenReturnListWithStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 1, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsOneStepIsMinusOneThenReturnListWithStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 1, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsOneStepIsZeroThenReturnListWithStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 1, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsOneStepIsOneThenReturnListWithStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 1, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsOneStepIsTwoThenReturnListWithStart() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 1, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsFourStepIsNullThenReturnListFromStartToEnd() {
        List<Integer> expected = Arrays.asList(1, 2, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 4, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsFourStepIsMinusTwoThenThrowIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 1, 4, -2));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsFourStepIsMinusOneThenIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 1, 4, -1));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsFourStepIsZeroThenReturnListFromStartToEnd() {
        List<Integer> expected = Arrays.asList(1, 2, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 4, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsFourStepIsOneThenReturnListFromStartToEnd() {
        List<Integer> expected = Arrays.asList(1, 2, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 4, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsFourStepIsTwoThenReturnOddFromStartToEnd() {
        List<Integer> expected = Arrays.asList(1, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 4, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsFifeStepIsNullThenReturnListWithoutFirst() {
        List<Integer> expected = Arrays.asList(1, 2, 3, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 5, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsFifeStepIsMinusTwoThenThrowIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 1, 5, -2));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    // seventh

    @Test
    public void whenStartIsOneEndIsFifeStepIsMinusOneThenThrowIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 1, 5, -1));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsFifeStepIsZeroThenReturnListFromStartToEnd() {
        List<Integer> expected = Arrays.asList(1, 2, 3, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 5, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsFifeStepIsOneThenReturnListFromStartToEnd() {
        List<Integer> expected = Arrays.asList(1, 2, 3, 4);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 5, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsOneEndIsFifeStepIsTwoThenReturnListOddFromStartToEnd() {
        List<Integer> expected = Arrays.asList(1, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, 1, 5, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsNullStepIsNullThenReturnListOfLastTwoElements() {
        List<Integer> expected = Arrays.asList(4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, null, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsNullStepIsMinusTwoThenReturnListEvenReversed() {
        List<Integer> expected = Arrays.asList(4, 2, 0);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, null, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsNullStepIsMinusOneThenReturnListFromStartReversed() {
        List<Integer> expected = Arrays.asList(4, 3, 2, 1, 0);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, null, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsNullStepIsZeroThenReturnListTwoLastElements() {
        List<Integer> expected = Arrays.asList(4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, null, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsNullStepIsOneThenReturnListTwoLastElements() {
        List<Integer> expected = Arrays.asList(4, 5);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, null, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsNullStepIsTwoThenReturnListOfLast() {
        List<Integer> expected = Arrays.asList(4);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, null, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsZeroStepIsNullThenReturnListFromStartToEnd() {
        List<Integer> expected = Arrays.asList(4, 3, 2, 1);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 0, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsZeroStepIsMinusTwoThenReturnListEvenFromStartToEnd() {
        List<Integer> expected = Arrays.asList(4, 2);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 0, -2);
        assertEquals(expected, actual);
    }

    // eighth

    @Test
    public void whenStartIsFourEndIsZeroStepIsMinusOneThenReturnListFromStartToEnd() {
        List<Integer> expected = Arrays.asList(4, 3, 2, 1);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 0, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsZeroStepIsZeroThenReturnListFromStartToEnd() {
        List<Integer> expected = Arrays.asList(4, 3, 2, 1);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 0, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsZeroStepIsOneThenThrowsIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 4, 0, 1));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsZeroStepIsTwoThenThrowsIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 4, 0, 2));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsOneStepIsNullThenReturnListFromStartToEnd() {
        List<Integer> expected = Arrays.asList(4, 3, 2);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 1, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsOneStepIsMinusTwoThenReturnListEvenFromStartToEnd() {
        List<Integer> expected = Arrays.asList(4, 2);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 1, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsOneStepIsMinusOneThenReturnListFromStartToEnd() {
        List<Integer> expected = Arrays.asList(4, 3, 2);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 1, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsOneStepIsZeroThenReturnListFromStartToEnd() {
        List<Integer> expected = Arrays.asList(4, 3, 2);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 1, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsOneStepIsOneThenThrowsIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 4, 1, 1));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsOneStepIsTwoThenThrowIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 4, 1, 2));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsFourStepIsNullThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(4);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 4, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsFourStepIsMinusTwoThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(4);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 4, -2);
        assertEquals(expected, actual);
    }

    // ninth

    @Test
    public void whenStartIsFourEndIsFourStepIsMinusOneThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(4);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 4, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsFourStepIsZeroThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(4);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 4, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsFourStepIsOneThenReturnListStart() {
        List<Integer> expected = Arrays.asList(4);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 4, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsFourStepIsTwoThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(4);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 4, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsFifeStepIsNullThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(4);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 5, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsFifeStepIsMinusTwoThenThrowIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 4, 5, -2));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsFifeStepIsMinusOneThenIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 4, 5, -1));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsFifeStepIsZeroThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(4);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 5, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsFifeStepIsOneThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(4);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 5, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFourEndIsFifeStepIsTwoThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(4);
        List<Integer> actual = new Slicer().slice(
                givenList, 4, 5, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsNullStepIsNullThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, null, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsNullStepIsMinusTwoThenReturnListOddReversed() {
        List<Integer> expected = Arrays.asList(5, 3, 1);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, null, -2);
        assertEquals(expected, actual);
    }

    // tenth

    @Test
    public void whenStartIsFifeEndIsNullStepIsMinusOneThenReturnListReversed() {
        List<Integer> expected = Arrays.asList(5, 4, 3, 2, 1, 0);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, null, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsNullStepIsZeroThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, null, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsNullStepIsOneThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, null, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsNullStepIsTwoThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, null, 2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsZeroStepIsNullThenReturnListReversedWhithoutLast() {
        List<Integer> expected = Arrays.asList(5, 4, 3, 2, 1);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 0, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsZeroStepIsMinusTwoThenReturnListOddReversed() {
        List<Integer> expected = Arrays.asList(5, 3, 1);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 0, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsZeroStepIsMinusOneThenReturnListReversedWithoutFirst() {
        List<Integer> expected = Arrays.asList(5, 4, 3, 2, 1);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 0, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsZeroStepIsZeroThenReturnListReversedWithoutFirst() {
        List<Integer> expected = Arrays.asList(5, 4, 3, 2, 1);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 0, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsZeroStepIsOneThenThrowIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 5, 0, 1));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsZeroStepIsTwoThenThrowIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 5, 0, 2));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsOneStepIsNullThenReturnListReversedWithoutEnd() {
        List<Integer> expected = Arrays.asList(5, 4, 3, 2);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 1, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsOneStepIsMinusTwoThenReturnListOddReversedWithoutEnd() {
        List<Integer> expected = Arrays.asList(5, 3);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 1, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsOneStepIsMinusOneThenReturnListReversedWithoutEnd() {
        List<Integer> expected = Arrays.asList(5, 4, 3, 2);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 1, -1);
        assertEquals(expected, actual);
    }

    // eleventh

    @Test
    public void whenStartIsFifeEndIsOneStepIsZeroThenReturnListReversedWithoutEnd() {
        List<Integer> expected = Arrays.asList(5, 4, 3, 2);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 1, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsOneStepIsOneThenThrowIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 5, 1, 1));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsOneStepIsTwoThenThrowIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 5, 1, 2));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFourStepIsNullThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 4, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFourStepIsMinusTwoThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 4, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFourStepIsMinusOneThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 4, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFourStepIsZeroThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 4, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFourStepIsOneThenThrowIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 5, 4, 1));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFourStepIsTwoThenThrowIllegalArgumentException() {
        Exception exception = assertThrows(
                IllegalArgumentException.class,
                () -> new Slicer().slice(
                        givenList, 5, 4, 2));
        String expected = WRONG_DIRECTION;
        String actual = exception.getMessage();
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFifeStepIsNullThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 5, null);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFifeStepIsMinusTwoThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 5, -2);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFifeStepIsMinusOneThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 5, -1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFifeStepIsZeroThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 5, 0);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFifeStepIsOneThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 5, 1);
        assertEquals(expected, actual);
    }

    @Test
    public void whenStartIsFifeEndIsFifeStepIsTwoThenReturnListOfStart() {
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = new Slicer().slice(
                givenList, 5, 5, 2);
        assertEquals(expected, actual);
    }

}
